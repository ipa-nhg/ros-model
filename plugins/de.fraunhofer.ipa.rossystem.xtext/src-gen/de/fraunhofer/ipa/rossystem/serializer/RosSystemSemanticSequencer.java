/*
 * generated by Xtext 2.12.0
 */
package de.fraunhofer.ipa.rossystem.serializer;

import com.google.inject.Inject;
import de.fraunhofer.ipa.rossystem.services.RosSystemGrammarAccess;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import rossystem.NameSpacedComponent;
import rossystem.RosSystem;
import rossystem.RossystemPackage;
import rossystem.ServiceConnection;
import rossystem.TopicConnection;

@SuppressWarnings("all")
public class RosSystemSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private RosSystemGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == RossystemPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case RossystemPackage.NAME_SPACED_COMPONENT:
				sequence_NameSpacedComponent(context, (NameSpacedComponent) semanticObject); 
				return; 
			case RossystemPackage.ROS_SYSTEM:
				sequence_RosSystem(context, (RosSystem) semanticObject); 
				return; 
			case RossystemPackage.SERVICE_CONNECTION:
				sequence_ServiceConnection(context, (ServiceConnection) semanticObject); 
				return; 
			case RossystemPackage.TOPIC_CONNECTION:
				sequence_TopicConnection(context, (TopicConnection) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     NameSpacedComponent returns NameSpacedComponent
	 *
	 * Constraint:
	 *     (NameSpace=EString? RosComponent=[ComponentInterface|EString])
	 */
	protected void sequence_NameSpacedComponent(ISerializationContext context, NameSpacedComponent semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     RosSystem returns RosSystem
	 *
	 * Constraint:
	 *     (
	 *         Name=EString? 
	 *         (RosComponents+=NameSpacedComponent RosComponents+=NameSpacedComponent*)? 
	 *         (TopicConnections+=TopicConnection TopicConnections+=TopicConnection*)? 
	 *         (ServiceConnections+=ServiceConnection ServiceConnections+=ServiceConnection*)?
	 *     )
	 */
	protected void sequence_RosSystem(ISerializationContext context, RosSystem semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ServiceConnection returns ServiceConnection
	 *
	 * Constraint:
	 *     (ServiceName=EString From+=[RosServiceServer|EString] From+=[RosServiceServer|EString]* To=[RosServiceClient|EString])
	 */
	protected void sequence_ServiceConnection(ISerializationContext context, ServiceConnection semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     TopicConnection returns TopicConnection
	 *
	 * Constraint:
	 *     (TopicName=EString From+=[RosPublisher|EString] From+=[RosPublisher|EString]* To+=[RosSubscriber|EString] To+=[RosSubscriber|EString]*)
	 */
	protected void sequence_TopicConnection(ISerializationContext context, TopicConnection semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
}
