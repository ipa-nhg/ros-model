/*
 * generated by Xtext 2.16.0
 */
package de.fraunhofer.ipa.ros.tests

import com.google.inject.Inject
import org.eclipse.xtext.testing.InjectWith
import org.eclipse.xtext.testing.XtextRunner
import org.eclipse.xtext.testing.util.ParseHelper
import org.junit.Assert
import org.junit.Test
import org.junit.runner.RunWith
import ros.PackageSet

@RunWith(XtextRunner)
@InjectWith(RosInjectorProvider)
class RosParsingTest {
	@Inject
	ParseHelper<PackageSet> parseHelper
	
	@Test
	def void loadModel() {
		val result = parseHelper.parse('''
			PackageSet { package { 
			  CatkinPackage cob_sick_s300 { artifact {
			    Artifact cob_sick_s300 {
			      node Node { name cob_sick_s300
			        publisher {
			          Publisher { name 'scan' message 'sensor_msgs.LaserScan'},
			          Publisher { name 'scan_standby' message 'std_msgs.Bool'},
			          Publisher { name '/diagnostics' message 'diagnostic_msgs.DiagnosticArray'}}
			}}}}}}
		''')
		Assert.assertNotNull(result)
		val errors = result.eResource.errors
		Assert.assertTrue('''Unexpected errors: «errors.join(", ")»''', errors.isEmpty)
	}
	
	
	@Test 
    def void parseDomainmodel() {
        val model = parseHelper.parse('''
			PackageSet { package { 
			  CatkinPackage cob_sick_s300 { artifact {
			    Artifact cob_sick_s300 {
			      node Node { name cob_sick_s300
			        publisher {
			          Publisher { name 'scan' message 'sensor_msgs.LaserScan'},
			          Publisher { name 'scan_standby' message 'std_msgs.Bool'},
			          Publisher { name '/diagnostics' message 'diagnostic_msgs.DiagnosticArray'}}
			}}}}}}
		''')
        val packageName = model.package.get(0).name
        val nodeName = model.package.get(0).artifact.get(0).node.name
        Assert.assertEquals(packageName, nodeName)
    }
}
