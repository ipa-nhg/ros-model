// automatically generated by Xtext
grammar de.fraunhofer.ipa.componentInterface.ComponentInterface with org.eclipse.xtext.common.Terminals

import "http://www.ipa.fraunhofer.de/componentInterface" 
import "http://www.ipa.fraunhofer.de/ros" as ros
import "http://www.eclipse.org/emf/2002/Ecore" as ecore
import "http://www.eclipse.org/emf/2003/XMLType" as type

ComponentInterface returns ComponentInterface:
	'ComponentInterface'
	'{'
		'name' name=EString
		('NameSpace' NameSpace=EString)?
		('RosPublishers' '{' rospublisher+=RosPublisher ( "," rospublisher+=RosPublisher)* '}' )?
		('RosSubscribers' '{' rossubscriber+=RosSubscriber ( "," rossubscriber+=RosSubscriber)* '}' )?
		('RosSrvServers' '{' rosserviceserver+=RosServiceServer ( "," rosserviceserver+=RosServiceServer)* '}' )?
		('RosSrvClients' '{' rosserviceclient+=RosServiceClient ( "," rosserviceclient+=RosServiceClient)* '}' )?
		('RosActionServers' '{' rosactionserver+=RosActionServer ( "," rosactionserver+=RosActionServer)* '}' )?
		('RosActionClients' '{' rosactionclient+=RosActionClient ( "," rosactionclient+=RosActionClient)* '}' )?
		('RosParameters' '{' rosparameter+=RosParameter ( "," rosparameter+=RosParameter)* '}' )?
	'}';


RosPublisher returns RosPublisher:
	{RosPublisher}
	'RosPublisher'
	(name=EString)?
	'{'
		('ns' ns=EString)?
		'RefPublisher' publisher=[ros::Publisher|EString]
	'}';

RosSubscriber returns RosSubscriber:
	{RosSubscriber}
	'RosSubscriber'
	(name=EString)?
	'{'
		('ns' ns=EString)?
		'RefSubscriber' subscriber=[ros::Subscriber|EString]
	'}';

RosServiceServer returns RosServiceServer:
	{RosServiceServer}
	'RosServiceServer'
	(name=EString)?
	'{'
		('ns' ns=EString)?
		'RefServer' srvserver=[ros::ServiceServer|EString]
	'}';

RosServiceClient returns RosServiceClient:
	{RosServiceClient}
	'RosServiceClient'
	(name=EString)?
	'{'
		('ns' ns=EString)?
		'RefClient' srvclient=[ros::ServiceClient|EString]
	'}';

RosActionServer returns RosActionServer:
	{RosActionServer}
	'RosActionServer'
	(name=EString)?
	'{'
		('ns' ns=EString)?
		'RefServer' actserver=[ros::ActionServer|EString]
	'}';

RosActionClient returns RosActionClient:
	{RosActionClient}
	'RosActionClient'
	(name=EString)?
	'{'
		('ns' ns=EString)?
		'RefClient' actclient=[ros::ActionClient|EString]
	'}';
	
RosParameter returns RosParameter:
{RosParameter}
'RosParameter'
(name=EString)?
'{'
	('ns' ns=EString)?
	'RefParameter' parameter=[ros::Parameter|EString]
	('value' value=ParameterValue)?
'}';
	
EString returns ecore::EString:
	STRING | ID;

NS returns NS:
	'NS' /* TODO: implement this rule and an appropriate IValueConverter */;

// PARAMETERS!!

ParameterValue returns ros::ParameterValue:
	{ros::ParameterDouble} Double0|{ros::ParameterBoolean} boolean0|{ros::ParameterString} EString | {ros::ParameterInteger} Integer0;


//PARAMETRRS PRIMITIVES TYPES

terminal BOOLEAN: 'true'|'false';
terminal fragment DIGIT: '0'..'9';
terminal DOUBLE returns ecore::EDouble: DECINT (('.' DIGIT*) | (('.' DIGIT*)? ('E'|'e') ('-'|'+')? DECINT));  // Use terminal to avoid 'e' turning into a keyword
terminal DECINT: '0' | ('1'..'9' DIGIT*);
terminal fragment SIGN : '+' | '-' ;


terminal SIGNED_INT:
	'-'* INT*;

terminal fragment HEX_DIGIT: (DIGIT|'a'..'f'|'A'..'F');

terminal HEX returns ecore::EIntegerObject: 
	'0x' HEX_DIGIT*;

terminal fragment BINARY_DIGIT: ('0' | '1');

terminal BINARY returns ecore::EIntegerObject:
	'0b' (BINARY_DIGIT('_')*)*;

boolean0 returns type::Boolean:
	BOOLEAN;

Double0 returns type::Double:
	DOUBLE;

Integer0 returns type::Int:
	DECINT
;
