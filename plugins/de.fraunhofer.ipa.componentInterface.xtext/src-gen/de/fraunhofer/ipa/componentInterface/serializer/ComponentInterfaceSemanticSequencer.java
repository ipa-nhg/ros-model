/*
 * generated by Xtext 2.20.0
 */
package de.fraunhofer.ipa.componentInterface.serializer;

import com.google.inject.Inject;
import componentInterface.ComponentInterface;
import componentInterface.ComponentInterfacePackage;
import componentInterface.RosActionClient;
import componentInterface.RosActionServer;
import componentInterface.RosParameter;
import componentInterface.RosPublisher;
import componentInterface.RosServiceClient;
import componentInterface.RosServiceServer;
import componentInterface.RosSubscriber;
import de.fraunhofer.ipa.componentInterface.services.ComponentInterfaceGrammarAccess;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import ros.ParameterBoolean;
import ros.ParameterDouble;
import ros.ParameterInteger;
import ros.ParameterString;
import ros.RosPackage;

@SuppressWarnings("all")
public class ComponentInterfaceSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private ComponentInterfaceGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == ComponentInterfacePackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case ComponentInterfacePackage.COMPONENT_INTERFACE:
				sequence_ComponentInterface(context, (ComponentInterface) semanticObject); 
				return; 
			case ComponentInterfacePackage.ROS_ACTION_CLIENT:
				sequence_RosActionClient(context, (RosActionClient) semanticObject); 
				return; 
			case ComponentInterfacePackage.ROS_ACTION_SERVER:
				sequence_RosActionServer(context, (RosActionServer) semanticObject); 
				return; 
			case ComponentInterfacePackage.ROS_PARAMETER:
				sequence_RosParameter(context, (RosParameter) semanticObject); 
				return; 
			case ComponentInterfacePackage.ROS_PUBLISHER:
				sequence_RosPublisher(context, (RosPublisher) semanticObject); 
				return; 
			case ComponentInterfacePackage.ROS_SERVICE_CLIENT:
				sequence_RosServiceClient(context, (RosServiceClient) semanticObject); 
				return; 
			case ComponentInterfacePackage.ROS_SERVICE_SERVER:
				sequence_RosServiceServer(context, (RosServiceServer) semanticObject); 
				return; 
			case ComponentInterfacePackage.ROS_SUBSCRIBER:
				sequence_RosSubscriber(context, (RosSubscriber) semanticObject); 
				return; 
			}
		else if (epackage == RosPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case RosPackage.PARAMETER_BOOLEAN:
				sequence_ParameterValue(context, (ParameterBoolean) semanticObject); 
				return; 
			case RosPackage.PARAMETER_DOUBLE:
				sequence_ParameterValue(context, (ParameterDouble) semanticObject); 
				return; 
			case RosPackage.PARAMETER_INTEGER:
				sequence_ParameterValue(context, (ParameterInteger) semanticObject); 
				return; 
			case RosPackage.PARAMETER_STRING:
				sequence_ParameterValue(context, (ParameterString) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     ComponentInterface returns ComponentInterface
	 *
	 * Constraint:
	 *     (
	 *         name=EString 
	 *         NameSpace=EString? 
	 *         (rospublisher+=RosPublisher rospublisher+=RosPublisher*)? 
	 *         (rossubscriber+=RosSubscriber rossubscriber+=RosSubscriber*)? 
	 *         (rosserviceserver+=RosServiceServer rosserviceserver+=RosServiceServer*)? 
	 *         (rosserviceclient+=RosServiceClient rosserviceclient+=RosServiceClient*)? 
	 *         (rosactionserver+=RosActionServer rosactionserver+=RosActionServer*)? 
	 *         (rosactionclient+=RosActionClient rosactionclient+=RosActionClient*)? 
	 *         (rosparameter+=RosParameter rosparameter+=RosParameter*)?
	 *     )
	 */
	protected void sequence_ComponentInterface(ISerializationContext context, ComponentInterface semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ParameterValue returns ParameterBoolean
	 *
	 * Constraint:
	 *     {ParameterBoolean}
	 */
	protected void sequence_ParameterValue(ISerializationContext context, ParameterBoolean semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ParameterValue returns ParameterDouble
	 *
	 * Constraint:
	 *     {ParameterDouble}
	 */
	protected void sequence_ParameterValue(ISerializationContext context, ParameterDouble semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ParameterValue returns ParameterInteger
	 *
	 * Constraint:
	 *     {ParameterInteger}
	 */
	protected void sequence_ParameterValue(ISerializationContext context, ParameterInteger semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ParameterValue returns ParameterString
	 *
	 * Constraint:
	 *     {ParameterString}
	 */
	protected void sequence_ParameterValue(ISerializationContext context, ParameterString semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     RosActionClient returns RosActionClient
	 *
	 * Constraint:
	 *     (name=EString? ns=EString? actclient=[ActionClient|EString])
	 */
	protected void sequence_RosActionClient(ISerializationContext context, RosActionClient semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     RosActionServer returns RosActionServer
	 *
	 * Constraint:
	 *     (name=EString? ns=EString? actserver=[ActionServer|EString])
	 */
	protected void sequence_RosActionServer(ISerializationContext context, RosActionServer semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     RosParameter returns RosParameter
	 *
	 * Constraint:
	 *     (name=EString? ns=EString? parameter=[Parameter|EString] value=ParameterValue?)
	 */
	protected void sequence_RosParameter(ISerializationContext context, RosParameter semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     RosPublisher returns RosPublisher
	 *
	 * Constraint:
	 *     (name=EString? ns=EString? publisher=[Publisher|EString])
	 */
	protected void sequence_RosPublisher(ISerializationContext context, RosPublisher semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     RosServiceClient returns RosServiceClient
	 *
	 * Constraint:
	 *     (name=EString? ns=EString? srvclient=[ServiceClient|EString])
	 */
	protected void sequence_RosServiceClient(ISerializationContext context, RosServiceClient semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     RosServiceServer returns RosServiceServer
	 *
	 * Constraint:
	 *     (name=EString? ns=EString? srvserver=[ServiceServer|EString])
	 */
	protected void sequence_RosServiceServer(ISerializationContext context, RosServiceServer semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     RosSubscriber returns RosSubscriber
	 *
	 * Constraint:
	 *     (name=EString? ns=EString? subscriber=[Subscriber|EString])
	 */
	protected void sequence_RosSubscriber(ISerializationContext context, RosSubscriber semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
}
