/**
 *
 * $Id$
 */
package PackageFormat2.validation;

import PackageFormat2.DependencyType;
import PackageFormat2.DescriptionType;
import PackageFormat2.ExportType;
import PackageFormat2.PersonWithEmailType;
import PackageFormat2.PersonWithOptionalEmailType;
import PackageFormat2.UrlType;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.util.FeatureMap;

/**
 * A sample validator interface for {@link PackageFormat2.PackageType}.
 * This doesn't really do anything, and it's not a real EMF artifact.
 * It was generated by the org.eclipse.emf.examples.generator.validator plug-in to illustrate how EMF's code generator can be extended.
 * This can be disabled with -vmargs -Dorg.eclipse.emf.examples.generator.validator=false.
 */
public interface PackageTypeValidator {
	boolean validate();

	boolean validateName(String value);
	boolean validateVersion(String value);
	boolean validateDescription(DescriptionType value);
	boolean validateMaintainer(EList<PersonWithEmailType> value);
	boolean validateLicense(EList<String> value);
	boolean validateUrl(EList<UrlType> value);
	boolean validateAuthor(EList<PersonWithOptionalEmailType> value);
	boolean validateGroup(FeatureMap value);
	boolean validateBuildDepend(EList<DependencyType> value);
	boolean validateBuildExportDepend(EList<DependencyType> value);
	boolean validateBuildtoolDepend(EList<DependencyType> value);
	boolean validateBuildtoolExportDepend(EList<DependencyType> value);
	boolean validateExecDepend(EList<DependencyType> value);
	boolean validateDepend(EList<DependencyType> value);
	boolean validateDocDepend(EList<DependencyType> value);
	boolean validateTestDepend(EList<DependencyType> value);
	boolean validateConflict(EList<DependencyType> value);
	boolean validateReplace(EList<DependencyType> value);
	boolean validateExport(ExportType value);
	boolean validateFormat(int value);
}
